<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[iOS中内存泄漏调试]]></title>
      <url>%2F2017%2F02%2F20%2FiOS%2FiOS%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%2F</url>
      <content type="text"><![CDATA[iOS开发中，内存问题一直是个长久不变的问题。这不，项目间歇间，用xcode自带的Leak跑了一下程序，发现了几个内存泄漏的地方，都是平时自己没有注意到的，并做出相应改正。在这里记录下。 ##1.运行程序 让程序先跑起来 ##2.进入Leak工具 如上图，选中show the debug（箭头指的），然后点击Memory 然后点击profile in instruments,通过Leak重新运行程序(弹出框中选择Restart ##3.操作Leak工具 如上图，此时程序在跑起来了，Leak Checks右边显示绿色的钩，表示当前没有内存泄漏，这时候我们就可以操作我的app了，跑起来吧，直到发现有红色的X，表示在这里有内存泄漏，如下图 点击红色X，选择Call Tree，如下图 这时候下面的列表会出来很多方法，但都是系统的，表示看不懂有木有啊。。。这时候点击右边中间的选项，然后勾选Call Tree下的Separate by Thread 和 Hide System Libraries，如下图 然后再看左右，下面列表的方法就会变成了我们自己写的方法了，如下图 在这里，有的人肯定会有疑问，为啥他的列表里的方法都是一些进制类的看不懂的，或者就是空白，这是因为Xcode编译项目后，我们会看到一个同名的 dSYM 文件，dSYM 是保存 16 进制函数地址映射信息的中转文件，我们调试的 symbols 都会包含在这个文件中，并且每次编译项目的时候都会生成一个新的 dSYM 文件。显示进制是因为我们的工程build settings 的问题，没有生成dSYM 文件，也就无法解析debug symbols。做法如下图 在Build Options将Debug information Format选择dsYM，这里默认的可能是release下选择的，将debug下也选择就可以了。然后重新从编译，重新运行，从第一步重新走一遍即可出来最后双击列表中暴露出来的方法，会直接显示代码，神不神奇~ 利用这个调试方法，里里外外将我们程序跑一跑，将内存泄漏的地方都改过来，这样程序闪退的机率将会大大减小。 关于product-&gt;analyze分析内存泄漏的问题优点：分析速度快，并且可以对所有的代码进行内存分析缺点：分析结果不一定准确（没有运行程序，根据代码的上下文语法结构）所以最好还是用Leak工具进行动态运行检查。 路漫漫其修远兮，吾将上下而求索，与君互勉。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[一行代码解决NavigationController多次push问题]]></title>
      <url>%2F2017%2F01%2F20%2FiOS%2F%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3NavigationController%E5%A4%9A%E6%AC%A1push%E9%97%AE%E9%A2%98%2F</url>
      <content type="text"><![CDATA[新建文件如下 UINavigationController+PushSafe.h 12345#import &lt;UIKit/UIKit.h&gt;@interface UINavigationController(PushSafe)-(void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated safe:(BOOL)safe;@end UINavigationController+PushSafe.m 123456789101112131415161718192021222324252627282930313233#import &quot;UINavigationController+PushSafe.h&quot;@implementation UINavigationController(PushSafe)-(void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated safe:(BOOL)safe&#123; if ([[self.viewControllers lastObject] isKindOfClass:viewController.class]&amp;&amp;safe) &#123; return ; &#125; [self pushViewController:viewController animated:animated];&#125;- (void)viewDidLoad &#123; [super viewDidLoad]; // Do any additional setup after loading the view.&#125;- (void)didReceiveMemoryWarning &#123; [super didReceiveMemoryWarning]; // Dispose of any resources that can be recreated.&#125;/*#pragma mark - Navigation// In a storyboard-based application, you will often want to do a little preparation before navigation- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender &#123; // Get the new view controller using [segue destinationViewController]. // Pass the selected object to the new view controller.&#125;*/@end 使用方法 1[self.navigationController pushViewController:chatController animated:YES safe:YES];]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[导入JPush后上传到svn上再checkout下来项目报错]]></title>
      <url>%2F2017%2F01%2F11%2FiOS%2F%E5%AF%BC%E5%85%A5JPush%E5%90%8E%E4%B8%8A%E4%BC%A0%E5%88%B0svn%E4%B8%8A%E5%86%8Dcheckout%E4%B8%8B%E6%9D%A5%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99%2F</url>
      <content type="text"><![CDATA[##在项目开发中,导入了激光推送的库，结果上传到svn后再checkout下来项目报错了。这是因为svn默认忽略静态库.a文件。 ##解决办法：cornerstone-&gt;Preference 取消打钩 删除.a]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[解决UIWebView显示HTML字符串特殊符号问题]]></title>
      <url>%2F2017%2F01%2F10%2FiOS%2F%E8%A7%A3%E5%86%B3UIWebView%E6%98%BE%E7%A4%BAHTML%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7%E9%97%AE%E9%A2%98%2F</url>
      <content type="text"><![CDATA[做项目时后台传入的HTML字符串本来是 &lt;p&gt;&lt;strong&gt;balabalaba&lt;/p&gt;&lt;/strong&gt; 结果被转码成了 &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;balabalaba&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt; 加载到webView显示会有问题，解决办法: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596- (NSString *)stringByDecodingXMLEntities &#123; NSUInteger myLength = [self length]; NSUInteger ampIndex = [self rangeOfString:@&quot;&amp;&quot; options:NSLiteralSearch].location; // Short-circuit if there are no ampersands. if (ampIndex == NSNotFound) &#123; return self; &#125; // Make result string with some extra capacity. NSMutableString *result = [NSMutableString stringWithCapacity:(myLength * 1.25)]; // First iteration doesn&apos;t need to scan to &amp; since we did that already, but for code simplicity&apos;s sake we&apos;ll do it again with the scanner. NSScanner *scanner = [NSScanner scannerWithString:self]; [scanner setCharactersToBeSkipped:nil]; NSCharacterSet *boundaryCharacterSet = [NSCharacterSet characterSetWithCharactersInString:@&quot; \t\n\r;&quot;]; do &#123; // Scan up to the next entity or the end of the string. NSString *nonEntityString; if ([scanner scanUpToString:@&quot;&amp;&quot; intoString:&amp;nonEntityString]) &#123; [result appendString:nonEntityString]; &#125; if ([scanner isAtEnd]) &#123; goto finish; &#125; // Scan either a HTML or numeric character entity reference. if ([scanner scanString:@&quot;&amp;&quot; intoString:NULL]) [result appendString:@&quot;&amp;&quot;]; else if ([scanner scanString:@&quot;&apos;&quot; intoString:NULL]) [result appendString:@&quot;&apos;&quot;]; else if ([scanner scanString:@&quot;&quot;&quot; intoString:NULL]) [result appendString:@&quot;\&quot;&quot;]; else if ([scanner scanString:@&quot;&lt;&quot; intoString:NULL]) [result appendString:@&quot;&lt;&quot;]; else if ([scanner scanString:@&quot;&gt;&quot; intoString:NULL]) [result appendString:@&quot;&gt;&quot;]; else if ([scanner scanString:@&quot;&amp;#&quot; intoString:NULL]) &#123; BOOL gotNumber; unsigned charCode; NSString *xForHex = @&quot;&quot;; // Is it hex or decimal? if ([scanner scanString:@&quot;x&quot; intoString:&amp;xForHex]) &#123; gotNumber = [scanner scanHexInt:&amp;charCode]; &#125; else &#123; gotNumber = [scanner scanInt:(int*)&amp;charCode]; &#125; if (gotNumber) &#123; [result appendFormat:@&quot;%C&quot;, charCode]; [scanner scanString:@&quot;;&quot; intoString:NULL]; &#125; else &#123; NSString *unknownEntity = @&quot;&quot;; [scanner scanUpToCharactersFromSet:boundaryCharacterSet intoString:&amp;unknownEntity]; [result appendFormat:@&quot;&amp;#%@%@&quot;, xForHex, unknownEntity]; //[scanner scanUpToString:@&quot;;&quot; intoString:&amp;unknownEntity]; //[result appendFormat:@&quot;&amp;#%@%@;&quot;, xForHex, unknownEntity]; NSLog(@&quot;Expected numeric character entity but got &amp;#%@%@;&quot;, xForHex, unknownEntity); &#125; &#125; else &#123; NSString *amp; [scanner scanString:@&quot;&amp;&quot; intoString:&amp;amp]; //an isolated &amp; symbol [result appendString:amp]; /* NSString *unknownEntity = @&quot;&quot;; [scanner scanUpToString:@&quot;;&quot; intoString:&amp;unknownEntity]; NSString *semicolon = @&quot;&quot;; [scanner scanString:@&quot;;&quot; intoString:&amp;semicolon]; [result appendFormat:@&quot;%@%@&quot;, unknownEntity, semicolon]; NSLog(@&quot;Unsupported XML character entity %@%@&quot;, unknownEntity, semicolon); */ &#125; &#125; while (![scanner isAtEnd]); finish: return result;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[SDWebImage更新图片缓存的方法]]></title>
      <url>%2F2016%2F11%2F20%2FiOS%2FSDWebImage%E6%9B%B4%E6%96%B0%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[##SDWebImage加载图片，在图片链接相同但图片内容发生变更时，SDWebImage 并不会加载新的图片。此时的解决方案为设置SDWebImage 的option参数为SDWebImageRefreshCached。具体如下图：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Swift怎么通过类名字符串来创建一个类]]></title>
      <url>%2F2016%2F09%2F20%2FiOS%2FSwift%E6%80%8E%E4%B9%88%E9%80%9A%E8%BF%87%E7%B1%BB%E5%90%8D%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9D%A5%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%B1%BB%2F</url>
      <content type="text"><![CDATA[OC中可以直接通过类名的字符串转换成对应的类来操作,但是Swift中必须用到命名空间,也就是说Swift中通过字符串获取类的方式为1234567891011let namespace = NSBundle.mainBundle().infoDictionary![&quot;CFBundleExecutable&quot;]guard ((namespace as? String) != nil) else&#123;return &#125;let modelClass : AnyClass? = NSClassFromString((namespace as? String)!+&quot;.&quot;+modelClassStr)let baseModel = modelClass?.alloc()]]></content>
    </entry>

    
  
  
</search>
