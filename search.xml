<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[解决UIWebView显示HTML字符串特殊符号问题]]></title>
      <url>%2F2016%2F09%2F19%2FiOS%2F%E8%A7%A3%E5%86%B3UIWebView%E6%98%BE%E7%A4%BAHTML%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7%E9%97%AE%E9%A2%98%2F</url>
      <content type="text"><![CDATA[做项目时后台传入的HTML字符串本来是 &lt;p&gt;&lt;strong&gt;balabalaba&lt;/p&gt;&lt;/strong&gt; 结果被转码成了 123```加载到webView显示会有问题，解决办法: (NSString *)stringByDecodingXMLEntities { NSUInteger myLength = [self length]; NSUInteger ampIndex = [self rangeOfString:@”&amp;” options:NSLiteralSearch].location; // Short-circuit if there are no ampersands. if (ampIndex == NSNotFound) { return self; } // Make result string with some extra capacity. NSMutableString result = [NSMutableString stringWithCapacity:(myLength 1.25)]; // First iteration doesn&apos;t need to scan to &amp; since we did that already, but for code simplicity&apos;s sake we&apos;ll do it again with the scanner. NSScanner *scanner = [NSScanner scannerWithString:self]; [scanner setCharactersToBeSkipped:nil]; NSCharacterSet *boundaryCharacterSet = [NSCharacterSet characterSetWithCharactersInString:@&quot; \t\n\r;&quot;]; do { // Scan up to the next entity or the end of the string. NSString *nonEntityString; if ([scanner scanUpToString:@&quot;&amp;&quot; intoString:&amp;nonEntityString]) { [result appendString:nonEntityString]; } if ([scanner isAtEnd]) { goto finish; } // Scan either a HTML or numeric character entity reference. if ([scanner scanString:@&quot;&amp;&quot; intoString:NULL]) [result appendString:@&quot;&amp;&quot;]; else if ([scanner scanString:@&quot;&apos;&quot; intoString:NULL]) [result appendString:@&quot;&apos;&quot;]; else if ([scanner scanString:@&quot;&quot;&quot; intoString:NULL]) [result appendString:@&quot;\&quot;&quot;]; else if ([scanner scanString:@&quot;&lt;&quot; intoString:NULL]) [result appendString:@&quot;&lt;&quot;]; else if ([scanner scanString:@&quot;&gt;&quot; intoString:NULL]) [result appendString:@&quot;&gt;&quot;]; else if ([scanner scanString:@&quot;&amp;#&quot; intoString:NULL]) { BOOL gotNumber; unsigned charCode; NSString *xForHex = @&quot;&quot;; // Is it hex or decimal? if ([scanner scanString:@&quot;x&quot; intoString:&amp;xForHex]) { gotNumber = [scanner scanHexInt:&amp;charCode]; } else { gotNumber = [scanner scanInt:(int*)&amp;charCode]; } if (gotNumber) { [result appendFormat:@&quot;%C&quot;, charCode]; [scanner scanString:@&quot;;&quot; intoString:NULL]; } else { NSString *unknownEntity = @&quot;&quot;; [scanner scanUpToCharactersFromSet:boundaryCharacterSet intoString:&amp;unknownEntity]; [result appendFormat:@&quot;&amp;#%@%@&quot;, xForHex, unknownEntity]; //[scanner scanUpToString:@&quot;;&quot; intoString:&amp;unknownEntity]; //[result appendFormat:@&quot;&amp;#%@%@;&quot;, xForHex, unknownEntity]; NSLog(@&quot;Expected numeric character entity but got &amp;#%@%@;&quot;, xForHex, unknownEntity); } } else { NSString *amp; [scanner scanString:@&quot;&amp;&quot; intoString:&amp;amp]; //an isolated &amp; symbol [result appendString:amp]; /* NSString *unknownEntity = @&quot;&quot;; [scanner scanUpToString:@&quot;;&quot; intoString:&amp;unknownEntity]; NSString *semicolon = @&quot;&quot;; [scanner scanString:@&quot;;&quot; intoString:&amp;semicolon]; [result appendFormat:@&quot;%@%@&quot;, unknownEntity, semicolon]; NSLog(@&quot;Unsupported XML character entity %@%@&quot;, unknownEntity, semicolon); */ } } while (![scanner isAtEnd]); finish: return result;}```]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Swift怎么通过类名字符串来创建一个类]]></title>
      <url>%2F2016%2F07%2F20%2FiOS%2FSwift%E6%80%8E%E4%B9%88%E9%80%9A%E8%BF%87%E7%B1%BB%E5%90%8D%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9D%A5%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%B1%BB%2F</url>
      <content type="text"><![CDATA[OC中可以直接通过类名的字符串转换成对应的类来操作,但是Swift中必须用到命名空间,也就是说Swift中通过字符串获取类的方式为1234567891011let namespace = NSBundle.mainBundle().infoDictionary![&quot;CFBundleExecutable&quot;]guard ((namespace as? String) != nil) else&#123;return &#125;let modelClass : AnyClass? = NSClassFromString((namespace as? String)!+&quot;.&quot;+modelClassStr)let baseModel = modelClass?.alloc()]]></content>
    </entry>

    
  
  
</search>
